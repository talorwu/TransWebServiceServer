package com.trans.service;

import java.util.HashMap;
import java.util.Map;

public class UtilMap {

	/**
	 * 返回路口之间的距离，用于计算平均速度
	 * @return
	 */
	public static Map<String,Double> getDistance(){
		Map<String,Double> map = new HashMap<String, Double>();		
		map.put("611471007000-611471008000", 0.64);
		map.put("611471008000-611471003000", 1.20);
		map.put("611471003000-611471004000", 1.40);
		map.put("611471004000-611471005000", 0.71);
		map.put("611471005000-611471001000", 0.60);
		map.put("611471001000-601571004000", 1.90);
		map.put("601571005000-601571004000", 0.88);	
		map.put("611721005000-611721009001", 0.74);	
		map.put("611721009001-611471001000", 0.52);	
		map.put("611721008000-611471001000", 1.40);
		map.put("611471007000-601571004000", 6.5);
		map.put("611471007000-611471003000", 1.84);
		map.put("611471003000-611471001000", 2.71);		
		map.put("611471004000-601571004000", 3.21);	
		map.put("611471004000-611471001000", 1.31);	
		map.put("611471007000-611681005000", 1.9);	
		map.put("611681005000-611661003000", 0.92);	
		map.put("611681005000-611671004000", 1.1);
		map.put("611471008000-611671004000", 1.4);
		map.put("611661003000-611471003000", 4.4);
		map.put("611661003000-611501001000", 2.5);
		map.put("611661003000-610401009001", 2.8);
		map.put("611661003000-611671004000", 2.2);
		map.put("611501001000-610401009001", 1.1);
		map.put("611501001000-611471003000", 2.2);
		map.put("610401009001-611471003000", 2.9);
		map.put("610401009001-610401004000", 0.8);
		map.put("610401004000-712021001001", 0.4);
		map.put("610401004000-610401001001", 0.88);
		map.put("611721008000-610401004000", 1.2);
		map.put("611471004000-611721008000", 1.3);
		map.put("611721007001-611721008000", 0.82);
		map.put("611471001000-611721007001", 0.55);
		map.put("611751001001-611471001000", 0.62);
		map.put("611751001001-601571005000", 1.3);
		map.put("611751001001-601571004000", 1.3);
		map.put("601571005000-601571004000", 0.88);
		map.put("611471007000-611661003000", 2.82);
		map.put("611721005000-712021001001", 4.2);
		map.put("611471001000-611471007000", 4.6);	
//		map.put("611721007001-610401004000", 2.0);
		//-----------------------------------临时数据*-------------
		map.put("610171001000-610071007000", 1.1);
		map.put("610171001000-610101001000", 0.76);
		map.put("610171001000-610031001000", 0.41);
		return map;
	}
	public static String getFileNameByCrossNum(String number){
		Map<String,String> map = new HashMap<String,String>();
		map.put( "#5","611471007000");
		map.put("#4","611471008000" );
		map.put( "#10","611471003000");
		map.put("#6","611471004000");
		map.put("#7","611471005000" );
		map.put("#8","611471001000" );
		map.put("#17","601571004000");
		map.put( "#2","601571005000");
		map.put("#13","611721005000");
		map.put("#12","611721008000");
		map.put("#11","611721009001");
		map.put("#15","611661003000");
		map.put("#19","610401009001");
		map.put("#23","611501001000");
		map.put("#24","610401004000");
		map.put("#27","712021001001");
		map.put("#28","610401001001");
		map.put("#31","611681005000");
		map.put("#33","611671004000");
		map.put("#35","611751001001");
		map.put("#43","611721007001");
		if(map.get(number)!=null){
			return map.get(number);	
		}
		return number;
	}
	
	/**
	 *  返回路口标识
	 * @param address
	 * @return
	 */
	public static String getCrossingNumber(String address){
		Map<String,String> map = new HashMap<String,String>();
		map.put("611471007000", "#5");
		map.put("611471008000", "#4");
		map.put("611471003000", "#10");
		map.put("611471004000", "#6");
		map.put("611471005000", "#7");
		map.put("611471001000", "#8");
		map.put("601571004000", "#17");
		map.put("601571005000", "#2");
		map.put("611721005000", "#13");
		map.put("611721008000", "#12");
		map.put("611721009001", "#11");
		map.put("611661003000", "#15");
		map.put("610401009001", "#19");
		map.put("611501001000", "#23");
		map.put("610401004000", "#24");
		map.put("712021001001", "#27");
		map.put("610401001001", "#28");
		map.put("611681005000", "#31");
		map.put("611671004000", "#33");
		map.put("611751001001", "#35");
		map.put("611721007001", "#43");
		if(map.get(address)!=null){
			return map.get(address);	
		}
		return address;
	}
	/**
	 * 返回路口之间的距离，用于计算过车数据增量
	 * @return
	 */
	public static Map<String,Double> getIncrementDistance(){
		Map<String,Double> map = new HashMap<String, Double>();
		map.put("611471007000-611471008000", 0.64);
		map.put("611471008000-611471007000", 0.64);
		map.put("611471008000-611471003000", 1.20);
		map.put("611471003000-611471008000", 1.20);
		map.put("611471003000-611471004000", 1.40);
		map.put("611471004000-611471003000", 1.40);
		map.put("611471004000-611471005000", 0.71);
		map.put("611471005000-611471004000", 0.71);
		map.put("611471005000-611471001000", 0.60);
		map.put("611471001000-611471005000", 0.60);
		map.put("611471001000-601571004000", 1.90);
		map.put("601571004000-611471001000", 1.90);
		return map;
	}
	/**
	 *返回�?要计算车辆旅行时间的路口及方�?
	 * @return
	 */
	public static Map<String,String> getCarPathTimeEntranceCode(){
		Map<String,String> map = new HashMap<String,String>();
		map.put("4-10-6-7-8","ns");
		map.put("8-7-6-10-4","sn");
		map.put("6-7-8","ns");
		map.put("8-7-6","sn");
		map.put("5-4-10","ns");
		map.put("10-4-5","sn");
		return map;
	}
	
	/**
	 * 
	 * @param number
	 * @return
	 */
	public String getFileName(String number){
		Map<String,String> map = new HashMap<String,String>();
		map.put("5" , "611471007000");
		map.put("4" , "611471008000");
		map.put("10", "611471003000");
		map.put("6" , "611471004000");
		map.put("7" , "611471005000");
		map.put("8" , "611471001000");
		map.put("17", "601571004000");
		map.put("2" , "601571005000");
		map.put("13", "611721005000");
		map.put("12", "611721008000");
		map.put("11", "611721009001");
		if(map.get(number) != null){
			return map.get(number);
		}
		return "";
	}
}
